const t=JSON.parse('{"key":"v-3eb98d59","path":"/posts/git/git.html","title":"Git命令大全","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2022-01-01T00:00:00.000Z","category":["git"],"description":"Git命令大全 Git 命令 功能描述 创建版本库 git init 在当前目录新建一个Git代码库 git init [project-name] 新建一个目录，将其初始化为Git代码库 git clone [url] 下载一个项目和它的整个代码历史 配置 git config --list 显示当前的Git配置 git config -e [--global] 编辑Git配置文件 git config [--global] user.name \\"[name]\\" 设置提交代码时的用户信息 git config [--global] user.email \\"[email address]\\" 设置提交代码时的用户信息 暂存区 git add [file1] [file2] 添加指定文件到暂存区 git add [dir] 添加指定目录到暂存区，包括子目录 git add 添加当前目录的所有文件到暂存区 git add -p 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交 删除文件 git rm [file1] [file2] 删除工作区文件，并且将这次删除放入暂存区 git rm --cached [file] 停止追踪指定文件，但该文件会保留在工作区 重命名文件 git mv [file-original] [file-renamed] 改名文件，并且将这个改名放入暂存区 提交 git commit -m [message] 提交暂存区到仓库区 git commit [file1] [file2] ... -m [message] 提交暂存区的指定文件到仓库区 git commit -a 提交工作区自上次commit之后的变化，直接到仓库区 git commit -v 提交时显示所有diff信息 git commit --amend -m [message] 使用一次新的commit，替代上一次提交。如果代码没有任何新变化，则用来改写上一次commit的提交信息 git commit --amend [file1] [file2] 重做上一次commit，并包括指定文件的新变化 分支管理 git branch 显示所有本地分支 git branch -r 列出所有远程分支 git branch -a 列出所有本地分支和远程分支 git branch [branch-name] 新建一个分支，但依然停留在当前分支 git branch --track [branch] [remote-branch] 新建一个分支，与指定的远程分支建立追踪关系 git branch -d [branch-name] 删除分支 git push origin --delete [branch-name] 删除远程分支 git branch -dr [remote/branch] 删除远程分支 git checkout -b [branch] 新建一个分支，并切换到该分支 git checkout [branch-name] 切换到指定分支，并更新工作区 git checkout - 切换到上一个分支 git branch --set-upstream [branch] [remote-branch] 建立追踪关系，在现有分支与指定的远程分支之间 合并与衍合 git merge [branch] 合并指定分支到当前分支 git rebase &lt;branch&gt; 衍合指定分支到当前分支 git cherry-pick [commit] 选择一个commit，合并进当前分支 标签管理 git tag 列出所有本地标签 git tag &lt;tagname&gt; 基于最新提交创建标签 git tag -d &lt;tagname&gt; 删除标签 git push origin :refs/tags/[tagName] 删除远程tag git show [tag] 查看tag信息 git push [remote] [tag] 提交指定tag git push [remote] --tags 提交所有tag git checkout -b [branch] [tag] 新建一个分支，指向某个tag 查看信息 git status 显示有变更的文件 git log 查看提交历史 git log --follow [file] 查看指定文件的提交历史 git log --stat 显示commit历史，以及每次commit发生变更的文件 git log -s [keyword] 搜索提交历史，根据关键词 git log [tag] HEAD --pretty=format:%s 显示某个commit之后的所有变动，每个commit占据一行 git log [tag] HEAD --grep feature 显示某个commit之后的所有变动，其\\"提交说明\\"必须符合搜索条件 git log --follow [file] 显示文件的版本历史，包括文件改名 git whatchanged [file] 显示指定文件相关的每一次diff git log -p [file] 显示指定文件的每一次提交diff git log -5 --pretty--oneline 显示过去5次提交 git shortlog -sn 显示所有提交过的用户，按提交次数排序 git blame [file] 显示指定文件是什么人在什么时间修改过 git diff 显示暂存区和工作区的差异 git diff --cached [file] 显示暂存区和上一个commit的差异 git diff HEAD 显示工作区与当前分支最新commit之间的差异 git diff [first-branch]...[second-branch] 显示两次提交之间的差异 git diff --shortstat \\"@{0 day ago}\\" 显示今天你写了多少行代码 git show [commit] 显示某次提交的元数据和内容变化 git show --name-only [commit] 显示某次提交发生变化的文件 git show [commit]:[filename] 显示某次提交时，某个文件的内容 比较差异 git diff 显示暂存区和工作区的差异 git diff --cached [file] 显示暂存区和上一个commit的差异 git diff HEAD 显示工作区与当前分支最新commit之间的差异 git diff [first-branch]...[second-branch] 显示两次提交之间的差异 git diff --shortstat \\"@{0 day ago}\\" 显示今天你写了多少行代码 git show [commit] 显示某次提交的元数据和内容变化 git show --name-only [commit] 显示某次提交发生变化的文件 git show [commit]:[filename] 显示某次提交时，某个文件的内容 git reflog 显示当前分支的最近几次提交 远程同步 git fetch [remote] 下载远程仓库的所有变动 git pull [remote] [branch] 取回远程仓库的变化，并与本地分支合并 git remote -v 显示所有远程仓库 git remote show [remote] 显示某个远程仓库的信息 git remote add [shortname] [url] 增加一个新的远程仓库，并命名 git push [remote] [branch] 上传本地指定分支到远程仓库 git push [remote] --force 强行推送当前分支到远程仓库，即使有冲突 git push [remote] --all 推送所有分支到远程仓库 git push &lt;remote&gt; :&lt;branch/tag-name&gt; 删除远程分支或标签 git push --tags 上传所有标签 版本控制 git reset --hard HEAD 撤销工作目录中所有未提交文件的修改内容 git checkout HEAD &lt;file&gt; 撤销指定的未提交文件的修改内容 git revert &lt;commit&gt; 撤销指定的提交 git log --before=\\"1 days\\" 退回到之前1天的版本 git checkout [file] 恢复暂存区的指定文件到工作 git checkout [commit] [file] 恢复某个commit的指定文件到暂存区和工作区 git checkout . 恢复暂存区的所有文件到工作区 git reset [file] 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 git reset --hard 重置暂存区与工作区，与上一次commit保持一致 git reset [commit] 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 git reset --hard [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 git reset --keep [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变 git revert [commit] 新建一个commit，用来撤销指定commit。后者的所有变化都将被前者抵消，并且应用到当前分支 git stash 暂时将未提交的变化移除，稍后再移入 git stash pop 从stash中移除最新的未提交变化，恢复到工作区 其他 git archive 创建一个可供导出（例如通过email）的zip或tar文件","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/my_blog/posts/git/git.html"}],["meta",{"property":"og:site_name","content":"青涛心语"}],["meta",{"property":"og:title","content":"Git命令大全"}],["meta",{"property":"og:description","content":"Git命令大全 Git 命令 功能描述 创建版本库 git init 在当前目录新建一个Git代码库 git init [project-name] 新建一个目录，将其初始化为Git代码库 git clone [url] 下载一个项目和它的整个代码历史 配置 git config --list 显示当前的Git配置 git config -e [--global] 编辑Git配置文件 git config [--global] user.name \\"[name]\\" 设置提交代码时的用户信息 git config [--global] user.email \\"[email address]\\" 设置提交代码时的用户信息 暂存区 git add [file1] [file2] 添加指定文件到暂存区 git add [dir] 添加指定目录到暂存区，包括子目录 git add 添加当前目录的所有文件到暂存区 git add -p 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交 删除文件 git rm [file1] [file2] 删除工作区文件，并且将这次删除放入暂存区 git rm --cached [file] 停止追踪指定文件，但该文件会保留在工作区 重命名文件 git mv [file-original] [file-renamed] 改名文件，并且将这个改名放入暂存区 提交 git commit -m [message] 提交暂存区到仓库区 git commit [file1] [file2] ... -m [message] 提交暂存区的指定文件到仓库区 git commit -a 提交工作区自上次commit之后的变化，直接到仓库区 git commit -v 提交时显示所有diff信息 git commit --amend -m [message] 使用一次新的commit，替代上一次提交。如果代码没有任何新变化，则用来改写上一次commit的提交信息 git commit --amend [file1] [file2] 重做上一次commit，并包括指定文件的新变化 分支管理 git branch 显示所有本地分支 git branch -r 列出所有远程分支 git branch -a 列出所有本地分支和远程分支 git branch [branch-name] 新建一个分支，但依然停留在当前分支 git branch --track [branch] [remote-branch] 新建一个分支，与指定的远程分支建立追踪关系 git branch -d [branch-name] 删除分支 git push origin --delete [branch-name] 删除远程分支 git branch -dr [remote/branch] 删除远程分支 git checkout -b [branch] 新建一个分支，并切换到该分支 git checkout [branch-name] 切换到指定分支，并更新工作区 git checkout - 切换到上一个分支 git branch --set-upstream [branch] [remote-branch] 建立追踪关系，在现有分支与指定的远程分支之间 合并与衍合 git merge [branch] 合并指定分支到当前分支 git rebase &lt;branch&gt; 衍合指定分支到当前分支 git cherry-pick [commit] 选择一个commit，合并进当前分支 标签管理 git tag 列出所有本地标签 git tag &lt;tagname&gt; 基于最新提交创建标签 git tag -d &lt;tagname&gt; 删除标签 git push origin :refs/tags/[tagName] 删除远程tag git show [tag] 查看tag信息 git push [remote] [tag] 提交指定tag git push [remote] --tags 提交所有tag git checkout -b [branch] [tag] 新建一个分支，指向某个tag 查看信息 git status 显示有变更的文件 git log 查看提交历史 git log --follow [file] 查看指定文件的提交历史 git log --stat 显示commit历史，以及每次commit发生变更的文件 git log -s [keyword] 搜索提交历史，根据关键词 git log [tag] HEAD --pretty=format:%s 显示某个commit之后的所有变动，每个commit占据一行 git log [tag] HEAD --grep feature 显示某个commit之后的所有变动，其\\"提交说明\\"必须符合搜索条件 git log --follow [file] 显示文件的版本历史，包括文件改名 git whatchanged [file] 显示指定文件相关的每一次diff git log -p [file] 显示指定文件的每一次提交diff git log -5 --pretty--oneline 显示过去5次提交 git shortlog -sn 显示所有提交过的用户，按提交次数排序 git blame [file] 显示指定文件是什么人在什么时间修改过 git diff 显示暂存区和工作区的差异 git diff --cached [file] 显示暂存区和上一个commit的差异 git diff HEAD 显示工作区与当前分支最新commit之间的差异 git diff [first-branch]...[second-branch] 显示两次提交之间的差异 git diff --shortstat \\"@{0 day ago}\\" 显示今天你写了多少行代码 git show [commit] 显示某次提交的元数据和内容变化 git show --name-only [commit] 显示某次提交发生变化的文件 git show [commit]:[filename] 显示某次提交时，某个文件的内容 比较差异 git diff 显示暂存区和工作区的差异 git diff --cached [file] 显示暂存区和上一个commit的差异 git diff HEAD 显示工作区与当前分支最新commit之间的差异 git diff [first-branch]...[second-branch] 显示两次提交之间的差异 git diff --shortstat \\"@{0 day ago}\\" 显示今天你写了多少行代码 git show [commit] 显示某次提交的元数据和内容变化 git show --name-only [commit] 显示某次提交发生变化的文件 git show [commit]:[filename] 显示某次提交时，某个文件的内容 git reflog 显示当前分支的最近几次提交 远程同步 git fetch [remote] 下载远程仓库的所有变动 git pull [remote] [branch] 取回远程仓库的变化，并与本地分支合并 git remote -v 显示所有远程仓库 git remote show [remote] 显示某个远程仓库的信息 git remote add [shortname] [url] 增加一个新的远程仓库，并命名 git push [remote] [branch] 上传本地指定分支到远程仓库 git push [remote] --force 强行推送当前分支到远程仓库，即使有冲突 git push [remote] --all 推送所有分支到远程仓库 git push &lt;remote&gt; :&lt;branch/tag-name&gt; 删除远程分支或标签 git push --tags 上传所有标签 版本控制 git reset --hard HEAD 撤销工作目录中所有未提交文件的修改内容 git checkout HEAD &lt;file&gt; 撤销指定的未提交文件的修改内容 git revert &lt;commit&gt; 撤销指定的提交 git log --before=\\"1 days\\" 退回到之前1天的版本 git checkout [file] 恢复暂存区的指定文件到工作 git checkout [commit] [file] 恢复某个commit的指定文件到暂存区和工作区 git checkout . 恢复暂存区的所有文件到工作区 git reset [file] 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 git reset --hard 重置暂存区与工作区，与上一次commit保持一致 git reset [commit] 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 git reset --hard [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 git reset --keep [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变 git revert [commit] 新建一个commit，用来撤销指定commit。后者的所有变化都将被前者抵消，并且应用到当前分支 git stash 暂时将未提交的变化移除，稍后再移入 git stash pop 从stash中移除最新的未提交变化，恢复到工作区 其他 git archive 创建一个可供导出（例如通过email）的zip或tar文件"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"洛溪"}],["meta",{"property":"article:published_time","content":"2022-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git命令大全\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"洛溪\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":6.1,"words":1830},"filePathRelative":"posts/git/git.md","localizedDate":"2022年1月1日","excerpt":"<h1> Git命令大全</h1>\\n<table>\\n<thead>\\n<tr>\\n<th>Git 命令</th>\\n<th>功能描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>创建版本库</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git init</code></td>\\n<td>在当前目录新建一个Git代码库</td>\\n</tr>\\n<tr>\\n<td><code>git init [project-name]</code></td>\\n<td>新建一个目录，将其初始化为Git代码库</td>\\n</tr>\\n<tr>\\n<td><code>git clone [url]</code></td>\\n<td>下载一个项目和它的整个代码历史</td>\\n</tr>\\n<tr>\\n<td><strong>配置</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git config --list</code></td>\\n<td>显示当前的Git配置</td>\\n</tr>\\n<tr>\\n<td><code>git config -e [--global]</code></td>\\n<td>编辑Git配置文件</td>\\n</tr>\\n<tr>\\n<td><code>git config [--global] user.name \\"[name]\\"</code></td>\\n<td>设置提交代码时的用户信息</td>\\n</tr>\\n<tr>\\n<td><code>git config [--global] user.email \\"[email address]\\"</code></td>\\n<td>设置提交代码时的用户信息</td>\\n</tr>\\n<tr>\\n<td><strong>暂存区</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git add [file1] [file2]</code></td>\\n<td>添加指定文件到暂存区</td>\\n</tr>\\n<tr>\\n<td><code>git add [dir]</code></td>\\n<td>添加指定目录到暂存区，包括子目录</td>\\n</tr>\\n<tr>\\n<td><code>git add</code></td>\\n<td>添加当前目录的所有文件到暂存区</td>\\n</tr>\\n<tr>\\n<td><code>git add -p</code></td>\\n<td>添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</td>\\n</tr>\\n<tr>\\n<td><strong>删除文件</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git rm [file1] [file2]</code></td>\\n<td>删除工作区文件，并且将这次删除放入暂存区</td>\\n</tr>\\n<tr>\\n<td><code>git rm --cached [file]</code></td>\\n<td>停止追踪指定文件，但该文件会保留在工作区</td>\\n</tr>\\n<tr>\\n<td><strong>重命名文件</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git mv [file-original] [file-renamed]</code></td>\\n<td>改名文件，并且将这个改名放入暂存区</td>\\n</tr>\\n<tr>\\n<td><strong>提交</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git commit -m [message]</code></td>\\n<td>提交暂存区到仓库区</td>\\n</tr>\\n<tr>\\n<td><code>git commit [file1] [file2] ... -m [message]</code></td>\\n<td>提交暂存区的指定文件到仓库区</td>\\n</tr>\\n<tr>\\n<td><code>git commit -a</code></td>\\n<td>提交工作区自上次commit之后的变化，直接到仓库区</td>\\n</tr>\\n<tr>\\n<td><code>git commit -v</code></td>\\n<td>提交时显示所有diff信息</td>\\n</tr>\\n<tr>\\n<td><code>git commit --amend -m [message]</code></td>\\n<td>使用一次新的commit，替代上一次提交。如果代码没有任何新变化，则用来改写上一次commit的提交信息</td>\\n</tr>\\n<tr>\\n<td><code>git commit --amend [file1] [file2]</code></td>\\n<td>重做上一次commit，并包括指定文件的新变化</td>\\n</tr>\\n<tr>\\n<td><strong>分支管理</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git branch</code></td>\\n<td>显示所有本地分支</td>\\n</tr>\\n<tr>\\n<td><code>git branch -r</code></td>\\n<td>列出所有远程分支</td>\\n</tr>\\n<tr>\\n<td><code>git branch -a</code></td>\\n<td>列出所有本地分支和远程分支</td>\\n</tr>\\n<tr>\\n<td><code>git branch [branch-name]</code></td>\\n<td>新建一个分支，但依然停留在当前分支</td>\\n</tr>\\n<tr>\\n<td><code>git branch --track [branch] [remote-branch]</code></td>\\n<td>新建一个分支，与指定的远程分支建立追踪关系</td>\\n</tr>\\n<tr>\\n<td><code>git branch -d [branch-name]</code></td>\\n<td>删除分支</td>\\n</tr>\\n<tr>\\n<td><code>git push origin --delete [branch-name]</code></td>\\n<td>删除远程分支</td>\\n</tr>\\n<tr>\\n<td><code>git branch -dr [remote/branch]</code></td>\\n<td>删除远程分支</td>\\n</tr>\\n<tr>\\n<td><code>git checkout -b [branch]</code></td>\\n<td>新建一个分支，并切换到该分支</td>\\n</tr>\\n<tr>\\n<td><code>git checkout [branch-name]</code></td>\\n<td>切换到指定分支，并更新工作区</td>\\n</tr>\\n<tr>\\n<td><code>git checkout -</code></td>\\n<td>切换到上一个分支</td>\\n</tr>\\n<tr>\\n<td><code>git branch --set-upstream [branch] [remote-branch]</code></td>\\n<td>建立追踪关系，在现有分支与指定的远程分支之间</td>\\n</tr>\\n<tr>\\n<td><strong>合并与衍合</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git merge [branch]</code></td>\\n<td>合并指定分支到当前分支</td>\\n</tr>\\n<tr>\\n<td><code>git rebase &lt;branch&gt;</code></td>\\n<td>衍合指定分支到当前分支</td>\\n</tr>\\n<tr>\\n<td><code>git cherry-pick [commit]</code></td>\\n<td>选择一个commit，合并进当前分支</td>\\n</tr>\\n<tr>\\n<td><strong>标签管理</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git tag</code></td>\\n<td>列出所有本地标签</td>\\n</tr>\\n<tr>\\n<td><code>git tag &lt;tagname&gt;</code></td>\\n<td>基于最新提交创建标签</td>\\n</tr>\\n<tr>\\n<td><code>git tag -d &lt;tagname&gt;</code></td>\\n<td>删除标签</td>\\n</tr>\\n<tr>\\n<td><code>git push origin :refs/tags/[tagName]</code></td>\\n<td>删除远程tag</td>\\n</tr>\\n<tr>\\n<td><code>git show [tag]</code></td>\\n<td>查看tag信息</td>\\n</tr>\\n<tr>\\n<td><code>git push [remote] [tag]</code></td>\\n<td>提交指定tag</td>\\n</tr>\\n<tr>\\n<td><code>git push [remote] --tags</code></td>\\n<td>提交所有tag</td>\\n</tr>\\n<tr>\\n<td><code>git checkout -b [branch] [tag]</code></td>\\n<td>新建一个分支，指向某个tag</td>\\n</tr>\\n<tr>\\n<td><strong>查看信息</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git status</code></td>\\n<td>显示有变更的文件</td>\\n</tr>\\n<tr>\\n<td><code>git log</code></td>\\n<td>查看提交历史</td>\\n</tr>\\n<tr>\\n<td><code>git log --follow [file]</code></td>\\n<td>查看指定文件的提交历史</td>\\n</tr>\\n<tr>\\n<td><code>git log --stat</code></td>\\n<td>显示commit历史，以及每次commit发生变更的文件</td>\\n</tr>\\n<tr>\\n<td><code>git log -s [keyword]</code></td>\\n<td>搜索提交历史，根据关键词</td>\\n</tr>\\n<tr>\\n<td><code>git log [tag] HEAD --pretty=format:%s</code></td>\\n<td>显示某个commit之后的所有变动，每个commit占据一行</td>\\n</tr>\\n<tr>\\n<td><code>git log [tag] HEAD --grep feature</code></td>\\n<td>显示某个commit之后的所有变动，其\\"提交说明\\"必须符合搜索条件</td>\\n</tr>\\n<tr>\\n<td><code>git log --follow [file]</code></td>\\n<td>显示文件的版本历史，包括文件改名</td>\\n</tr>\\n<tr>\\n<td><code>git whatchanged [file]</code></td>\\n<td>显示指定文件相关的每一次diff</td>\\n</tr>\\n<tr>\\n<td><code>git log -p [file]</code></td>\\n<td>显示指定文件的每一次提交diff</td>\\n</tr>\\n<tr>\\n<td><code>git log -5 --pretty--oneline</code></td>\\n<td>显示过去5次提交</td>\\n</tr>\\n<tr>\\n<td><code>git shortlog -sn</code></td>\\n<td>显示所有提交过的用户，按提交次数排序</td>\\n</tr>\\n<tr>\\n<td><code>git blame [file]</code></td>\\n<td>显示指定文件是什么人在什么时间修改过</td>\\n</tr>\\n<tr>\\n<td><code>git diff</code></td>\\n<td>显示暂存区和工作区的差异</td>\\n</tr>\\n<tr>\\n<td><code>git diff --cached [file]</code></td>\\n<td>显示暂存区和上一个commit的差异</td>\\n</tr>\\n<tr>\\n<td><code>git diff HEAD</code></td>\\n<td>显示工作区与当前分支最新commit之间的差异</td>\\n</tr>\\n<tr>\\n<td><code>git diff [first-branch]...[second-branch]</code></td>\\n<td>显示两次提交之间的差异</td>\\n</tr>\\n<tr>\\n<td><code>git diff --shortstat \\"@{0 day ago}\\"</code></td>\\n<td>显示今天你写了多少行代码</td>\\n</tr>\\n<tr>\\n<td><code>git show [commit]</code></td>\\n<td>显示某次提交的元数据和内容变化</td>\\n</tr>\\n<tr>\\n<td><code>git show --name-only [commit]</code></td>\\n<td>显示某次提交发生变化的文件</td>\\n</tr>\\n<tr>\\n<td><code>git show [commit]:[filename]</code></td>\\n<td>显示某次提交时，某个文件的内容</td>\\n</tr>\\n<tr>\\n<td><strong>比较差异</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git diff</code></td>\\n<td>显示暂存区和工作区的差异</td>\\n</tr>\\n<tr>\\n<td><code>git diff --cached [file]</code></td>\\n<td>显示暂存区和上一个commit的差异</td>\\n</tr>\\n<tr>\\n<td><code>git diff HEAD</code></td>\\n<td>显示工作区与当前分支最新commit之间的差异</td>\\n</tr>\\n<tr>\\n<td><code>git diff [first-branch]...[second-branch]</code></td>\\n<td>显示两次提交之间的差异</td>\\n</tr>\\n<tr>\\n<td><code>git diff --shortstat \\"@{0 day ago}\\"</code></td>\\n<td>显示今天你写了多少行代码</td>\\n</tr>\\n<tr>\\n<td><code>git show [commit]</code></td>\\n<td>显示某次提交的元数据和内容变化</td>\\n</tr>\\n<tr>\\n<td><code>git show --name-only [commit]</code></td>\\n<td>显示某次提交发生变化的文件</td>\\n</tr>\\n<tr>\\n<td><code>git show [commit]:[filename]</code></td>\\n<td>显示某次提交时，某个文件的内容</td>\\n</tr>\\n<tr>\\n<td><code>git reflog</code></td>\\n<td>显示当前分支的最近几次提交</td>\\n</tr>\\n<tr>\\n<td><strong>远程同步</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git fetch [remote]</code></td>\\n<td>下载远程仓库的所有变动</td>\\n</tr>\\n<tr>\\n<td><code>git pull [remote] [branch]</code></td>\\n<td>取回远程仓库的变化，并与本地分支合并</td>\\n</tr>\\n<tr>\\n<td><code>git remote -v</code></td>\\n<td>显示所有远程仓库</td>\\n</tr>\\n<tr>\\n<td><code>git remote show [remote]</code></td>\\n<td>显示某个远程仓库的信息</td>\\n</tr>\\n<tr>\\n<td><code>git remote add [shortname] [url]</code></td>\\n<td>增加一个新的远程仓库，并命名</td>\\n</tr>\\n<tr>\\n<td><code>git push [remote] [branch]</code></td>\\n<td>上传本地指定分支到远程仓库</td>\\n</tr>\\n<tr>\\n<td><code>git push [remote] --force</code></td>\\n<td>强行推送当前分支到远程仓库，即使有冲突</td>\\n</tr>\\n<tr>\\n<td><code>git push [remote] --all</code></td>\\n<td>推送所有分支到远程仓库</td>\\n</tr>\\n<tr>\\n<td><code>git push &lt;remote&gt; :&lt;branch/tag-name&gt;</code></td>\\n<td>删除远程分支或标签</td>\\n</tr>\\n<tr>\\n<td><code>git push --tags</code></td>\\n<td>上传所有标签</td>\\n</tr>\\n<tr>\\n<td><strong>版本控制</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git reset --hard HEAD</code></td>\\n<td>撤销工作目录中所有未提交文件的修改内容</td>\\n</tr>\\n<tr>\\n<td><code>git checkout HEAD &lt;file&gt;</code></td>\\n<td>撤销指定的未提交文件的修改内容</td>\\n</tr>\\n<tr>\\n<td><code>git revert &lt;commit&gt;</code></td>\\n<td>撤销指定的提交</td>\\n</tr>\\n<tr>\\n<td><code>git log --before=\\"1 days\\"</code></td>\\n<td>退回到之前1天的版本</td>\\n</tr>\\n<tr>\\n<td><code>git checkout [file]</code></td>\\n<td>恢复暂存区的指定文件到工作</td>\\n</tr>\\n<tr>\\n<td><code>git checkout [commit] [file]</code></td>\\n<td>恢复某个commit的指定文件到暂存区和工作区</td>\\n</tr>\\n<tr>\\n<td><code>git checkout .</code></td>\\n<td>恢复暂存区的所有文件到工作区</td>\\n</tr>\\n<tr>\\n<td><code>git reset [file]</code></td>\\n<td>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</td>\\n</tr>\\n<tr>\\n<td><code>git reset --hard</code></td>\\n<td>重置暂存区与工作区，与上一次commit保持一致</td>\\n</tr>\\n<tr>\\n<td><code>git reset [commit]</code></td>\\n<td>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</td>\\n</tr>\\n<tr>\\n<td><code>git reset --hard [commit]</code></td>\\n<td>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</td>\\n</tr>\\n<tr>\\n<td><code>git reset --keep [commit]</code></td>\\n<td>重置当前HEAD为指定commit，但保持暂存区和工作区不变</td>\\n</tr>\\n<tr>\\n<td><code>git revert [commit]</code></td>\\n<td>新建一个commit，用来撤销指定commit。后者的所有变化都将被前者抵消，并且应用到当前分支</td>\\n</tr>\\n<tr>\\n<td><code>git stash</code></td>\\n<td>暂时将未提交的变化移除，稍后再移入</td>\\n</tr>\\n<tr>\\n<td><code>git stash pop</code></td>\\n<td>从stash中移除最新的未提交变化，恢复到工作区</td>\\n</tr>\\n<tr>\\n<td><strong>其他</strong></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>git archive</code></td>\\n<td>创建一个可供导出（例如通过email）的zip或tar文件</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
