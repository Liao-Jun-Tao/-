import{_ as t,W as d,X as e,a1 as o}from"./framework-dbd9b2bf.js";const r={},c=o('<h1 id="git命令大全" tabindex="-1"><a class="header-anchor" href="#git命令大全" aria-hidden="true">#</a> Git命令大全</h1><table><thead><tr><th>Git 命令</th><th>功能描述</th></tr></thead><tbody><tr><td><strong>创建版本库</strong></td><td></td></tr><tr><td><code>git init</code></td><td>在当前目录新建一个Git代码库</td></tr><tr><td><code>git init [project-name]</code></td><td>新建一个目录，将其初始化为Git代码库</td></tr><tr><td><code>git clone [url]</code></td><td>下载一个项目和它的整个代码历史</td></tr><tr><td><strong>配置</strong></td><td></td></tr><tr><td><code>git config --list</code></td><td>显示当前的Git配置</td></tr><tr><td><code>git config -e [--global]</code></td><td>编辑Git配置文件</td></tr><tr><td><code>git config [--global] user.name &quot;[name]&quot;</code></td><td>设置提交代码时的用户信息</td></tr><tr><td><code>git config [--global] user.email &quot;[email address]&quot;</code></td><td>设置提交代码时的用户信息</td></tr><tr><td><strong>暂存区</strong></td><td></td></tr><tr><td><code>git add [file1] [file2]</code></td><td>添加指定文件到暂存区</td></tr><tr><td><code>git add [dir]</code></td><td>添加指定目录到暂存区，包括子目录</td></tr><tr><td><code>git add</code></td><td>添加当前目录的所有文件到暂存区</td></tr><tr><td><code>git add -p</code></td><td>添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</td></tr><tr><td><strong>删除文件</strong></td><td></td></tr><tr><td><code>git rm [file1] [file2]</code></td><td>删除工作区文件，并且将这次删除放入暂存区</td></tr><tr><td><code>git rm --cached [file]</code></td><td>停止追踪指定文件，但该文件会保留在工作区</td></tr><tr><td><strong>重命名文件</strong></td><td></td></tr><tr><td><code>git mv [file-original] [file-renamed]</code></td><td>改名文件，并且将这个改名放入暂存区</td></tr><tr><td><strong>提交</strong></td><td></td></tr><tr><td><code>git commit -m [message]</code></td><td>提交暂存区到仓库区</td></tr><tr><td><code>git commit [file1] [file2] ... -m [message]</code></td><td>提交暂存区的指定文件到仓库区</td></tr><tr><td><code>git commit -a</code></td><td>提交工作区自上次commit之后的变化，直接到仓库区</td></tr><tr><td><code>git commit -v</code></td><td>提交时显示所有diff信息</td></tr><tr><td><code>git commit --amend -m [message]</code></td><td>使用一次新的commit，替代上一次提交。如果代码没有任何新变化，则用来改写上一次commit的提交信息</td></tr><tr><td><code>git commit --amend [file1] [file2]</code></td><td>重做上一次commit，并包括指定文件的新变化</td></tr><tr><td><strong>分支管理</strong></td><td></td></tr><tr><td><code>git branch</code></td><td>显示所有本地分支</td></tr><tr><td><code>git branch -r</code></td><td>列出所有远程分支</td></tr><tr><td><code>git branch -a</code></td><td>列出所有本地分支和远程分支</td></tr><tr><td><code>git branch [branch-name]</code></td><td>新建一个分支，但依然停留在当前分支</td></tr><tr><td><code>git branch --track [branch] [remote-branch]</code></td><td>新建一个分支，与指定的远程分支建立追踪关系</td></tr><tr><td><code>git branch -d [branch-name]</code></td><td>删除分支</td></tr><tr><td><code>git push origin --delete [branch-name]</code></td><td>删除远程分支</td></tr><tr><td><code>git branch -dr [remote/branch]</code></td><td>删除远程分支</td></tr><tr><td><code>git checkout -b [branch]</code></td><td>新建一个分支，并切换到该分支</td></tr><tr><td><code>git checkout [branch-name]</code></td><td>切换到指定分支，并更新工作区</td></tr><tr><td><code>git checkout -</code></td><td>切换到上一个分支</td></tr><tr><td><code>git branch --set-upstream [branch] [remote-branch]</code></td><td>建立追踪关系，在现有分支与指定的远程分支之间</td></tr><tr><td><strong>合并与衍合</strong></td><td></td></tr><tr><td><code>git merge [branch]</code></td><td>合并指定分支到当前分支</td></tr><tr><td><code>git rebase &lt;branch&gt;</code></td><td>衍合指定分支到当前分支</td></tr><tr><td><code>git cherry-pick [commit]</code></td><td>选择一个commit，合并进当前分支</td></tr><tr><td><strong>标签管理</strong></td><td></td></tr><tr><td><code>git tag</code></td><td>列出所有本地标签</td></tr><tr><td><code>git tag &lt;tagname&gt;</code></td><td>基于最新提交创建标签</td></tr><tr><td><code>git tag -d &lt;tagname&gt;</code></td><td>删除标签</td></tr><tr><td><code>git push origin :refs/tags/[tagName]</code></td><td>删除远程tag</td></tr><tr><td><code>git show [tag]</code></td><td>查看tag信息</td></tr><tr><td><code>git push [remote] [tag]</code></td><td>提交指定tag</td></tr><tr><td><code>git push [remote] --tags</code></td><td>提交所有tag</td></tr><tr><td><code>git checkout -b [branch] [tag]</code></td><td>新建一个分支，指向某个tag</td></tr><tr><td><strong>查看信息</strong></td><td></td></tr><tr><td><code>git status</code></td><td>显示有变更的文件</td></tr><tr><td><code>git log</code></td><td>查看提交历史</td></tr><tr><td><code>git log --follow [file]</code></td><td>查看指定文件的提交历史</td></tr><tr><td><code>git log --stat</code></td><td>显示commit历史，以及每次commit发生变更的文件</td></tr><tr><td><code>git log -s [keyword]</code></td><td>搜索提交历史，根据关键词</td></tr><tr><td><code>git log [tag] HEAD --pretty=format:%s</code></td><td>显示某个commit之后的所有变动，每个commit占据一行</td></tr><tr><td><code>git log [tag] HEAD --grep feature</code></td><td>显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</td></tr><tr><td><code>git log --follow [file]</code></td><td>显示文件的版本历史，包括文件改名</td></tr><tr><td><code>git whatchanged [file]</code></td><td>显示指定文件相关的每一次diff</td></tr><tr><td><code>git log -p [file]</code></td><td>显示指定文件的每一次提交diff</td></tr><tr><td><code>git log -5 --pretty--oneline</code></td><td>显示过去5次提交</td></tr><tr><td><code>git shortlog -sn</code></td><td>显示所有提交过的用户，按提交次数排序</td></tr><tr><td><code>git blame [file]</code></td><td>显示指定文件是什么人在什么时间修改过</td></tr><tr><td><code>git diff</code></td><td>显示暂存区和工作区的差异</td></tr><tr><td><code>git diff --cached [file]</code></td><td>显示暂存区和上一个commit的差异</td></tr><tr><td><code>git diff HEAD</code></td><td>显示工作区与当前分支最新commit之间的差异</td></tr><tr><td><code>git diff [first-branch]...[second-branch]</code></td><td>显示两次提交之间的差异</td></tr><tr><td><code>git diff --shortstat &quot;@{0 day ago}&quot;</code></td><td>显示今天你写了多少行代码</td></tr><tr><td><code>git show [commit]</code></td><td>显示某次提交的元数据和内容变化</td></tr><tr><td><code>git show --name-only [commit]</code></td><td>显示某次提交发生变化的文件</td></tr><tr><td><code>git show [commit]:[filename]</code></td><td>显示某次提交时，某个文件的内容</td></tr><tr><td><strong>比较差异</strong></td><td></td></tr><tr><td><code>git diff</code></td><td>显示暂存区和工作区的差异</td></tr><tr><td><code>git diff --cached [file]</code></td><td>显示暂存区和上一个commit的差异</td></tr><tr><td><code>git diff HEAD</code></td><td>显示工作区与当前分支最新commit之间的差异</td></tr><tr><td><code>git diff [first-branch]...[second-branch]</code></td><td>显示两次提交之间的差异</td></tr><tr><td><code>git diff --shortstat &quot;@{0 day ago}&quot;</code></td><td>显示今天你写了多少行代码</td></tr><tr><td><code>git show [commit]</code></td><td>显示某次提交的元数据和内容变化</td></tr><tr><td><code>git show --name-only [commit]</code></td><td>显示某次提交发生变化的文件</td></tr><tr><td><code>git show [commit]:[filename]</code></td><td>显示某次提交时，某个文件的内容</td></tr><tr><td><code>git reflog</code></td><td>显示当前分支的最近几次提交</td></tr><tr><td><strong>远程同步</strong></td><td></td></tr><tr><td><code>git fetch [remote]</code></td><td>下载远程仓库的所有变动</td></tr><tr><td><code>git pull [remote] [branch]</code></td><td>取回远程仓库的变化，并与本地分支合并</td></tr><tr><td><code>git remote -v</code></td><td>显示所有远程仓库</td></tr><tr><td><code>git remote show [remote]</code></td><td>显示某个远程仓库的信息</td></tr><tr><td><code>git remote add [shortname] [url]</code></td><td>增加一个新的远程仓库，并命名</td></tr><tr><td><code>git push [remote] [branch]</code></td><td>上传本地指定分支到远程仓库</td></tr><tr><td><code>git push [remote] --force</code></td><td>强行推送当前分支到远程仓库，即使有冲突</td></tr><tr><td><code>git push [remote] --all</code></td><td>推送所有分支到远程仓库</td></tr><tr><td><code>git push &lt;remote&gt; :&lt;branch/tag-name&gt;</code></td><td>删除远程分支或标签</td></tr><tr><td><code>git push --tags</code></td><td>上传所有标签</td></tr><tr><td><strong>版本控制</strong></td><td></td></tr><tr><td><code>git reset --hard HEAD</code></td><td>撤销工作目录中所有未提交文件的修改内容</td></tr><tr><td><code>git checkout HEAD &lt;file&gt;</code></td><td>撤销指定的未提交文件的修改内容</td></tr><tr><td><code>git revert &lt;commit&gt;</code></td><td>撤销指定的提交</td></tr><tr><td><code>git log --before=&quot;1 days&quot;</code></td><td>退回到之前1天的版本</td></tr><tr><td><code>git checkout [file]</code></td><td>恢复暂存区的指定文件到工作</td></tr><tr><td><code>git checkout [commit] [file]</code></td><td>恢复某个commit的指定文件到暂存区和工作区</td></tr><tr><td><code>git checkout .</code></td><td>恢复暂存区的所有文件到工作区</td></tr><tr><td><code>git reset [file]</code></td><td>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</td></tr><tr><td><code>git reset --hard</code></td><td>重置暂存区与工作区，与上一次commit保持一致</td></tr><tr><td><code>git reset [commit]</code></td><td>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</td></tr><tr><td><code>git reset --hard [commit]</code></td><td>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</td></tr><tr><td><code>git reset --keep [commit]</code></td><td>重置当前HEAD为指定commit，但保持暂存区和工作区不变</td></tr><tr><td><code>git revert [commit]</code></td><td>新建一个commit，用来撤销指定commit。后者的所有变化都将被前者抵消，并且应用到当前分支</td></tr><tr><td><code>git stash</code></td><td>暂时将未提交的变化移除，稍后再移入</td></tr><tr><td><code>git stash pop</code></td><td>从stash中移除最新的未提交变化，恢复到工作区</td></tr><tr><td><strong>其他</strong></td><td></td></tr><tr><td><code>git archive</code></td><td>创建一个可供导出（例如通过email）的zip或tar文件</td></tr></tbody></table>',2),i=[c];function g(m,a){return d(),e("div",null,i)}const s=t(r,[["render",g],["__file","git.html.vue"]]);export{s as default};
